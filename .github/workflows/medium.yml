name: Laravel with MySQL
on:
  push:
    branches:
      - master

jobs:
  # laravel:
  #   name: Laravel (PHP ${{ matrix.php-versions }})
  #   runs-on: ubuntu-latest
  #   env:
  #     DB_DATABASE: laravel
  #     DB_USERNAME: root
  #     DB_PASSWORD: root
  #     BROADCAST_DRIVER: log
  #     CACHE_DRIVER: redis
  #     QUEUE_CONNECTION: redis
  #     SESSION_DRIVER: redis
  #   services:
  #     mysql:
  #       image: mysql:latest
  #       env:
  #         MYSQL_ALLOW_EMPTY_PASSWORD: false
  #         MYSQL_ROOT_PASSWORD: root
  #         MYSQL_DATABASE: laravel
  #       ports:
  #         - 3306/tcp
  #       options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

  #     redis:
  #       image: redis
  #       ports:
  #         - 6379/tcp
  #       options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       php-versions: ['8.2']
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup PHP
  #       uses: shivammathur/setup-php@v2
  #       with:
  #         php-version: ${{ matrix.php-versions }}
  #         extensions: sqlite, pdo_sqlite, pcntl, zip, intl, exif, mbstring, dom, fileinfo, mysql
  #         coverage: xdebug

  #     - name: Get composer cache directory
  #       id: composer-cache
  #       run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

  #     - name: Cache composer dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: ${{ steps.composer-cache.outputs.dir }}
  #         # Use composer.json for key, if composer.lock is not committed.
  #         # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
  #         key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
  #         restore-keys: ${{ runner.os }}-composer-

  #     - name: Install Composer dependencies
  #       run: composer install --no-progress --prefer-dist --optimize-autoloader

  #     - name: Prepare Laravel Application
  #       run: |
  #         php -r "file_exists('.env') || copy('.env.example', '.env');"
  #         php artisan key:generate

  #     - name: Clear Config
  #       run: php artisan config:clear

  #     - name: Run Migration
  #       run: php artisan migrate
  #       env:
  #         DB_PORT: ${{ job.services.mysql.ports['3306'] }}
  #         REDIS_PORT: ${{ job.services.redis.ports['6379'] }}

  #     - name: Run seed database
  #       run: php artisan db:seed

  #     - name: Run link storage
  #       run: php artisan storage:link

  #     - name: Test with phpunit
  #       run: vendor/bin/phpunit --coverage-text
  #       env:
  #         DB_PORT: ${{ job.services.mysql.ports['3306'] }}
  #         REDIS_PORT: ${{ job.services.redis.ports['6379'] }}

  #     - name: Install Yarn dependencies
  #       run: yarn

  #     - name: Run Node
  #       run: yarn dev

  #     - name: Compile assets
  #       run: yarn build

  #     # - name: Deploy to server
  #     #   uses: appleboy/ssh-action@master
  #     #   with:
  #     #     host: ${{ secrets.SSH_HOST }}
  #     #     username: ${{ secrets.SSH_USERNAME }}
  #     #     port: ${{ secrets.SSH_PORT }}
  #     #     password: ${{ secrets.SSH_PASSWORD }}
  #     #     script: cd ${{ secrets.SSH_PATH }} && ./.scripts/deploy.sh

  build:
    runs-on: ubuntu-latest
    # needs: laravel
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/tamiyochi-laravel:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # SSH to server and deploy
      - name: SSH to server and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          # port: ${{ secrets.PORT }}
          key: ${{ secrets.SSHKEY }}
          script: |
            # Pull Docker image
            docker pull ${{ secrets.DOCKER_USERNAME }}/tamiyochi-laravel:latest

            # Stop and remove existing container if exists
            docker stop tamiyochi-laravel || true
            docker rm tamiyochi-laravel || true

            # Run new container
            docker run -d --name tamiyochi-laravel \
              -p 80:80 \
              -e DB_HOST=0.0.0.0 \
              -e DB_DATABASE=laravel \
              -e DB_USERNAME=root \
              -e DB_PASSWORD=root\
              ${{ secrets.DOCKER_USERNAME }}/tamiyochi-laravel:latest
