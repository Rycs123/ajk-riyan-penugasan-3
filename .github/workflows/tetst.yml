name: Build and Deploy Laravel Application

on:
  push:
    branches:
      - master

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push mysql image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          file: Dockerfile.mysql
          tags: ${{ secrets.DOCKER_USERNAME }}/mysql:latest

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          file: Dockerfile.service1
          tags: ${{ secrets.DOCKER_USERNAME }}/backend:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          file: Dockerfile.service2
          tags: ${{ secrets.DOCKER_USERNAME }}/frontend:latest

      - name: Build and push nginx image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          file: Dockerfile.nginx
          tags: ${{ secrets.DOCKER_USERNAME }}/nginx:latest
#   deploy:
#     runs-on: ubuntu-latest
#     needs: build

#     steps:
#       - name: deploy to server via ssh
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.HOST }}
#           username: ${{ secrets.USERNAME }}
#           key: ${{ secrets.SSHKEY }}
#           script: |
#             docker pull ${{ secrets.DOCKER_USERNAME }}/frontend:latest
#             docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest
#             docker pull ${{ secrets.DOCKER_USERNAME }}/nginx:latest
#             docker pull ${{ secrets.DOCKER_USERNAME }}/mysql:latest

#             # Stop and remove existing containers
#             docker stop frontend || true && docker rm frontend || true
#             docker stop backend || true && docker rm backend || true
#             docker stop nginx || true && docker rm nginx || true
#             docker stop mysql || true && docker rm mysql || true

#             # Run MySQL container
#             docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }} -e MYSQL_DATABASE=${{ secrets.DB_DATABASE }} -e MYSQL_USER=${{ secrets.DB_USERNAME }} -e MYSQL_PASSWORD=${{ secrets.DB_PASSWORD }} -v mysql_data:/var/lib/mysql mysql:5.7

#             # Wait for MySQL to be ready
#             until docker exec mysql mysqladmin --user=${{ secrets.DB_USERNAME }} --password=${{ secrets.DB_PASSWORD }} --host "127.0.0.1" ping --silent &> /dev/null ; do
#               echo "Waiting for database connection..."
#               sleep 2
#             done

#             # Run backend container and perform migrations and seeding
#             docker run -d --name backend --link mysql:mysql --env-file /path/to/.env ${{ secrets.DOCKER_USERNAME }}/backend:latest
#             docker exec backend php artisan migrate --force
#             docker exec backend php artisan db:seed --force

#             # Run frontend container
#             docker run -d --name frontend -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/frontend:latest

#             # Run nginx container
#             docker run -d --name nginx -p 80:80 --link frontend:frontend --link backend:backend -v /path/to/nginx/default.conf:/etc/nginx/conf.d/default.conf ${{ secrets.DOCKER_USERNAME }}/nginx:latest

# volumes:
#   mysql_data:
